# SVM Model Extraction for ESP32
# This script extracts parameters from the trained SVM model and formats them for ESP32 deployment

import numpy as np
import pandas as pd
import joblib
import json

# Load the trained SVM model
print("Loading SVM model...")
svm_model = joblib.load('svm_model.pkl')

# Load the scaler used during training
print("Loading StandardScaler...")
scaler = joblib.load('scaler.pkl')  # Assuming you saved the scaler during training

# Get model parameters
print("Extracting model parameters...")

# Support vectors
support_vectors = svm_model.support_vectors_
num_support_vectors = support_vectors.shape[0]
num_features = support_vectors.shape[1]

print(f"Number of support vectors: {num_support_vectors}")
print(f"Number of features: {num_features}")

# Dual coefficients (alpha_i * y_i)
dual_coefs = svm_model.dual_coef_[0]

# Intercept (bias term)
bias = svm_model.intercept_[0]

# Gamma parameter for RBF kernel
gamma = svm_model._gamma

# Get feature means and standard deviations from the scaler
feature_means = scaler.mean_
feature_stds = scaler.scale_

# Create a dictionary to store all parameters
svm_params = {
    "num_support_vectors": num_support_vectors,
    "num_features": num_features,
    "gamma": gamma,
    "bias": bias,
    "dual_coefficients": dual_coefs.tolist(),
    "support_vectors": support_vectors.flatten().tolist(),
    "feature_means": feature_means.tolist(),
    "feature_stds": feature_stds.tolist()
}

# Save parameters as JSON
with open('svm_params.json', 'w') as f:
    json.dump(svm_params, f)

print("SVM parameters saved to svm_params.json")

# Generate C++ code with model parameters
print("Generating C++ code...")

cpp_code = f"""
// SVM Model Parameters
// Auto-generated by SVM extraction script

// Model configuration
const int SVM_NUM_SUPPORT_VECTORS = {num_support_vectors};
const int SVM_NUM_FEATURES = {num_features};
const float SVM_GAMMA = {gamma}f;
const float SVM_BIAS = {bias}f;

// Feature normalization parameters (means and standard deviations)
const float featureMeans[SVM_NUM_FEATURES] = {{
"""

# Add feature means
for i in range(0, num_features, 8):  # 8 values per line
    cpp_code += "    "
    for j in range(i, min(i + 8, num_features)):
        cpp_code += f"{feature_means[j]:.6f}f"
        if j < num_features - 1:
            cpp_code += ", "
    cpp_code += "\n"

cpp_code += "};\n\nconst float featureStds[SVM_NUM_FEATURES] = {\n"

# Add feature standard deviations
for i in range(0, num_features, 8):  # 8 values per line
    cpp_code += "    "
    for j in range(i, min(i + 8, num_features)):
        cpp_code += f"{feature_stds[j]:.6f}f"
        if j < num_features - 1:
            cpp_code += ", "
    cpp_code += "\n"

cpp_code += "};\n\n// Support vector coefficients (alpha_i * y_i)\n"
cpp_code += "const float svmCoefficients[SVM_NUM_SUPPORT_VECTORS] = {\n"

# Add dual coefficients
for i in range(0, num_support_vectors, 8):  # 8 values per line
    cpp_code += "    "
    for j in range(i, min(i + 8, num_support_vectors)):
        cpp_code += f"{dual_coefs[j]:.6f}f"
        if j < num_support_vectors - 1:
            cpp_code += ", "
    cpp_code += "\n"

cpp_code += "};\n\n// Support vectors (flattened)\n"
cpp_code += "const float supportVectors[SVM_NUM_SUPPORT_VECTORS * SVM_NUM_FEATURES] = {\n"

# Add support vectors
flat_sv = support_vectors.flatten()
for i in range(0, len(flat_sv), 8):  # 8 values per line
    cpp_code += "    "
    for j in range(i, min(i + 8, len(flat_sv))):
        cpp_code += f"{flat_sv[j]:.6f}f"
        if j < len(flat_sv) - 1:
            cpp_code += ", "
    cpp_code += "\n"

cpp_code += "};\n"

# Write C++ code to file
with open('svm_model_params.h', 'w') as f:
    f.write(cpp_code)

print("C++ header file with model parameters saved to svm_model_params.h")
print("Integration instructions:")
print("1. Copy svm_model_params.h to your ESP32 project folder")
print("2. Include the header in your main sketch: #include \"svm_model_params.h\"")
print("3. Replace the example model parameters in the sketch with the actual values")
print("Done!")
